package App::Croon;
use 5.008005;
use strict;
use warnings;
use Cwd 'getcwd';
use File::Spec::Functions qw/catfile/;
use File::Temp;
use App::Croon::Cron;

our $VERSION = "0.01";

sub generate_cron {
    my ($objects) = @_;

    my $cron = '';
    for my $obj (@$objects) {
        $cron .= App::Croon::Cron::translate_from_obj($obj) . "\n";
    }

    return $cron;
}

sub write_cron {
    my ($objects) = @_;

    my $cron = backup_cron();

    for my $obj (@$objects) {
        my $cron_row = App::Croon::Cron::translate_from_obj($obj);
        my $name = $obj->{name};

        my $replaced = $cron =~ s/# $name: this cron was generated by Croon {{{.+# }}} $name\n/$cron_row/sm; # update

        unless ($replaced) { # add new one
            $cron .= $cron_row . "\n";
        }
    }
    _write_out($cron);
}

sub remove_cron_row {
    my ($name) = @_;

    (my $cron = backup_cron()) =~ s/# $name: this cron was generated by Croon {{{.+# }}} $name\n//sm; # remove
    _write_out($cron);
}

sub backup_cron {
    my $cron_bak = `crontab -l`;

    return '' unless $cron_bak;
    open my $fh, '>', catfile(getcwd, 'crontab.bak');
    print $fh $cron_bak;
    return $cron_bak;
}

sub _write_out {
    my ($cron) = @_;

    my ($fh, $filename) = File::Temp::tempfile();
    print $fh $cron;
    `cat $filename | crontab`;
}

1;
__END__

=encoding utf-8

=head1 NAME

App::Croon - It's new $module

=head1 SYNOPSIS

    use App::Croon;

=head1 DESCRIPTION

App::Croon is ...

=head1 LICENSE

Copyright (C) moznion.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 AUTHOR

moznion E<lt>moznion@gmail.comE<gt>

=cut

