package App::Croon::Cron;
use strict;
use warnings;
use utf8;
use Carp;

use constant WEEKDAY_MAP => {
    sun => 0,
    mon => 1,
    tue => 2,
    wed => 3,
    thu => 4,
    fri => 5,
    sat => 6,
};

use constant MONTH_MAP => {
    jan => 1,
    feb => 2,
    mar => 3,
    apr => 4,
    may => 5,
    jun => 6,
    jul => 7,
    aug => 8,
    sep => 9,
    oct => 10,
    nov => 11,
    dec => 12,
};

sub translate_from_obj {
    my ($obj) = @_;

    my $min     = _validate_min($obj->{min});
    my $hour    = _validate_hour($obj->{hour});
    my $day     = _validate_day($obj->{day});
    my $month   = _validate_month($obj->{month});
    my $w_day   = _convert_weekday($obj->{w_day});
    my $command = _escape_command($obj->{command});
    my $name    = $obj->{name} or croak '[Error] Name is not specified';

    if (my $exclusion = $obj->{exclusion}) {
        my $from = $exclusion->{from};
        my $to = $exclusion->{to};
        croak '[Error] Invalid exclusion date range is specified' if (!$from || !$to);
        $from =~ s/://g;
        $to   =~ s/://g;
        $command = 'now=`date +"%H%M%S"`' . sprintf(' && if ([ %s -le $now ] && [ $now -le %s ]) ; then %s ; fi', $from, $to, $command);
    }

    my $cron = sprintf(<<'EOC', $name, $min, $hour, $day, $month, $w_day, $command, $name);
# %s: this cron was generated by Croon {{{
%s %s %s %s %s %s
# }}} %s
EOC
    return $cron;
}

sub _validate_min {
    my ($min) = @_;

    return '*' unless $min;
    if ($min !~ /^[1-5]?[0-9]$/) {
        croak '[Error] Invalid minutes is specified';
    }
    return $min;
}

sub _validate_hour {
    my ($hour) = @_;

    return '*' unless $hour;
    if ($hour !~ /^(?:1?[0-9]|2[0-3])$/) {
        croak '[Error] Invalid minutes is specified';
    }
    return $hour;
}

sub _validate_day {
    my ($day) = @_;

    return '*' unless $day;
    if ($day !~ /^(?:[12]?[0-9]|3[01])$/) {
        croak '[Error] Invalid minutes is specified';
    }
    return $day;
}

sub _validate_month {
    my ($month) = @_;

    return '*' unless $month;
    return $month if $month =~ /^(?:[0-9]|1[0-2])$/;
    MONTH_MAP->{lcfirst($month)} or croak '[Error] Invalid month is specified';
}

sub _convert_weekday {
    my ($w_day) = @_;

    return '*' unless $w_day;
    return $w_day if $w_day =~ /[0-6]/;
    WEEKDAY_MAP->{lcfirst($w_day)} or croak '[Error] Invalid weekday is specified';
}

sub _escape_command {
    my ($command) = @_;

    croak '[Error] Command is not specified' unless $command;

    $command =~ s/%/\\%/g;
    return $command;
}

1;
